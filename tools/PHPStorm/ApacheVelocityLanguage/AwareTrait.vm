<?php
declare(strict_types=1);

#if (${NAMESPACE})

namespace ${NAMESPACE};

#end

use ${NAMESPACE}Interface;

trait AwareTrait
{
    public function set${TargetClassName}(\\${NAMESPACE}Interface ${DS}${camelCaseArgumentName}): self
    {
        ${DS}this->_create(\\${NAMESPACE}Interface::class, ${DS}${camelCaseArgumentName});

        return ${DS}this;
    }

    protected function _get${TargetClassName}(): \\${NAMESPACE}Interface
    {
        return ${DS}this->_read(\\${NAMESPACE}Interface::class);
    }

    protected function _get${TargetClassName}Clone(): \\${NAMESPACE}Interface
    {
        return clone ${DS}this->_get${TargetClassName}();
    }

    protected function _has${TargetClassName}(): bool
    {
        return ${DS}this->_exists(\\${NAMESPACE}Interface::class);
    }

    protected function _unset${TargetClassName}(): self
    {
        ${DS}this->_delete(\\${NAMESPACE}Interface::class);

        return ${DS}this;
    }
}